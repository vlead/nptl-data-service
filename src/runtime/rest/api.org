#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

  
* REST
  
** Fetch NPTEL URLs for a given keyword
   REST API to do do the above

#+NAME: get_nptel_urls_for_keyword
#+BEGIN_SRC python
@api.route('/keyword', methods=['GET'])
def get_nptel_urls():
    if request.method == 'GET':
        current_app.logger.debug("get generic feedback")
        # Create a new component (KeyWordUrlMapper)
        #instantiate this class
        # invoke the method =get_urls_for_keyword=
        # keyWordUrlMapper = KeyWordUrlMapper()
        # url_list = keyWordUrlMapper.get_urls_for_keyword(keyword)
        # return this list
            
#+END_SRC

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.config.system_config import KEY
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
from runtime.config.flask_app_config import GENERIC_FEEDBACK_VERSION,\
     GENERIC_LAB_FEEDBACK_VERSION, GENERIC_EXP_FEEDBACK_VERSION, ELASTIC_DB_URL

import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:

** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_add_generic_feedback>>
<<get_add_generic_lab_exp_feedback>>
<<get_success_template>>
<<get_add_feedback>>
<<get_feedback_usage>>
<<get_feedback_dump>>
<<get_gateway_ip>>
<<get_and_add_question>>
<<update_and_delete_question>>
<<get_and_add_feedback_to_elk>>
<<get_and_add_usage_to_elk>>
<<add_feedback_to_elastic_db>>
<<add_college_details_to_elk>>
<<add_usage_to_elk>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_get_generic_feedback>>
<<test_get_generic_lab_and_exp_feedback>>
<<test_add_generic_feedback>>
<<test_get_feedback>>
<<test_add_feedback>>
<<test_get_feedback_usage>>
<<test_get_feedback_dump>>
<<test_add_question>>
<<test_update_question>>
<<test_delete_question>>
<<test_get_questions>>
<<test_feedback_details_to_elk>>
<<test_dump_college_details_to_elk>>
<<test_dump_usages_details_to_elk>>
<<test_feedback_details_to_elk>>
<<run_test_cases>>
#+end_src

